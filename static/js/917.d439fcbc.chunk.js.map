{"version":3,"file":"static/js/917.d439fcbc.chunk.js","mappings":"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","sources":["components/MovieItem/MovieItem.jsx","components/MovieTrendList/MovieTrendList.jsx","page/Home.js","servises/API.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const MovieItem = ({ id, original_title }) => {\n  const location = useLocation();\n  return (\n    <li>\n        <Link to={`movies/${id}`} state={{ from: location }}>\n            {original_title}\n        </Link>\n    </li>\n  )\n}\n","import { MovieItem } from \"components/MovieItem/MovieItem\"\n\nexport const MovieTrendList = ({movieList}) => {\n  return (\n    <ul>\n        {movieList.map(({id, original_title}) => (\n          <MovieItem key={id} id={id} original_title={original_title} />\n        ))}\n      </ul>\n  )\n}\n","import { useEffect, useState } from 'react';\nimport { trendingFilms } from 'servises/API';\nimport { MovieTrendList } from 'components/MovieTrendList/MovieTrendList';\n\nconst Home = () => {\n  const [movieList, setMovieList] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  \n  useEffect(() => {\n    const trendMovie = async () => {\n      try {\n        setIsLoading(true)\n        const films = await trendingFilms();\n        console.log(films)\n        setMovieList(films);\n        setError(null)\n      } catch (error) {\n        setError(error.message)\n      } finally {\n        setIsLoading(false)\n      }\n    };\n\n    trendMovie();\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      alert(error);\n    }\n  }, [error]);\n\n  return (\n    <>\n      <h2>Trending movies</h2>\n      {movieList && !isLoading &&(<MovieTrendList movieList={ movieList} />)}\n      \n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport Img from '../components/Image/img.png';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '817d33fa7e0ddfc368fbd7439a742f76';\n\nconst params = {\n  api_key: API_KEY,\n  language: 'en-US',\n  include_adult: false,\n};\n\nexport async function trendingFilms() {\n  const { data } = await axios.get('/trending/movie/day', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function searchingFilms(query) {\n  const params = {\n    query,\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function getFilmsById(id) {\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w500' + poster_path\n      : Img,\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(2),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n}\n\nexport async function getCreditsById(id) {\n  const { data } = await axios.get(`/movie/${id}/credits`, { params });\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: profile_path\n      ? 'https://image.tmdb.org/t/p/w500' + profile_path\n      : Img,\n  }));\n  return credits;\n}\n\nexport async function getReviewsById(id) {\n  const { data } = await axios.get(`/movie/${id}/reviews`, { params });\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n"],"names":["MovieItem","id","original_title","location","useLocation","to","state","from","MovieTrendList","movieList","map","useState","setMovieList","error","setError","isLoading","setIsLoading","useEffect","trendMovie","trendingFilms","films","console","log","message","alert","axios","API_KEY","params","api_key","language","include_adult","data","movies","results","searchingFilms","query","getFilmsById","poster_path","release_date","vote_average","overview","genres","Img","slice","toFixed","name","join","getCreditsById","credits","cast","profile_path","getReviewsById","reviews","author","content"],"sourceRoot":""}