{"version":3,"file":"static/js/785.c1769874.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.js","servises/API.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsById } from 'servises/API';\n\nconst Reviews = () => {\n  const params = useParams();\n  const paramsId = Number(params.moviesId);\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n\n\n  useEffect(() => {\n    if (!paramsId) return;\n    const getMovieReviews = async paramsId => {\n      try {\n        setIsLoading(true);\n        const reviews = await getReviewsById(paramsId);\n\n        setMovieReviews(reviews);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieReviews(paramsId);\n  }, [paramsId]);\n\n  useEffect(() => {\n    if (error) {\n      alert(error);\n    }\n  }, [error]);\n\n  return (\n    <section>\n      {movieReviews.length >0  && !isLoading&& (\n        <ul>\n            {movieReviews.map(({ id,\n              author,\n              content, }) => (\n              <li key={id}>\n                <p>{author}</p>\n                <p>{content}</p>\n              </li>\n            ))} \n          </ul>\n      )}\n      {movieReviews.length===0 && !isLoading && (<p> We don't have any reviews for this movie</p>)}           \n    </section>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport Img from '../components/Image/img.png';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '817d33fa7e0ddfc368fbd7439a742f76';\n\nconst params = {\n  api_key: API_KEY,\n  language: 'en-US',\n  include_adult: false,\n};\n\nexport async function trendingFilms() {\n  const { data } = await axios.get('/trending/movie/day', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function searchingFilms(query) {\n  const params = {\n    query,\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function getFilmsById(id) {\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w500' + poster_path\n      : Img,\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(2),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n}\n\nexport async function getCreditsById(id) {\n  const { data } = await axios.get(`/movie/${id}/credits`, { params });\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: profile_path\n      ? 'https://image.tmdb.org/t/p/w500' + profile_path\n      : Img,\n  }));\n  return credits;\n}\n\nexport async function getReviewsById(id) {\n  const { data } = await axios.get(`/movie/${id}/reviews`, { params });\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n"],"names":["params","useParams","paramsId","Number","moviesId","useState","movieReviews","setMovieReviews","error","setError","isLoading","setIsLoading","useEffect","getMovieReviews","getReviewsById","reviews","message","alert","length","map","id","author","content","axios","API_KEY","api_key","language","include_adult","trendingFilms","data","movies","results","original_title","searchingFilms","query","getFilmsById","poster_path","release_date","vote_average","overview","genres","Img","slice","toFixed","name","join","getCreditsById","credits","cast","profile_path"],"sourceRoot":""}