{"version":3,"file":"static/js/900.fb5eb375.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js","servises/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"image\":\"Cast_image__mOsuM\",\"item\":\"Cast_item__a0CDL\"};","import { getCreditsById } from 'servises/API';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styles from './Cast.module.css';\n\nconst Cast = () => {\n  const params = useParams();\n  const paramsId = Number(params.moviesId);\n  const [movieCreditDetail, setMovieCreditDetail] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n   useEffect(() => {\n    if (!paramsId) return;\n    const getMovieCredits = async paramsId => {\n      try {\n        setIsLoading(true);\n        const credits = await getCreditsById(paramsId);\n   \n        setMovieCreditDetail(credits);\n        setError('');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieCredits(paramsId);\n   }, [paramsId]);\n  \n  useEffect(() => {\n    if (error) {\n      alert(error);\n    }\n  }, [error]);\n\n  return (\n    <section>\n      {movieCreditDetail.length >0 && !isLoading &&(\n        <ul className={styles.list}>\n          {movieCreditDetail.map(({id,\n            name,\n            profile_path}) => (\n            <li className={styles.item} key={id}>\n              <img\n                  className={styles.image}\n                  src={profile_path}\n                  alt={name}\n                />\n              <p>{name}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport Img from '../components/Image/img.png';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '817d33fa7e0ddfc368fbd7439a742f76';\n\nconst params = {\n  api_key: API_KEY,\n  language: 'en-US',\n  include_adult: false,\n};\n\nexport async function trendingFilms() {\n  const { data } = await axios.get('/trending/movie/day', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function searchingFilms(query) {\n  const params = {\n    query,\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function getFilmsById(id) {\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w500' + poster_path\n      : Img,\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(2),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n}\n\nexport async function getCreditsById(id) {\n  const { data } = await axios.get(`/movie/${id}/credits`, { params });\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: profile_path\n      ? 'https://image.tmdb.org/t/p/w500' + profile_path\n      : Img,\n  }));\n  return credits;\n}\n\nexport async function getReviewsById(id) {\n  const { data } = await axios.get(`/movie/${id}/reviews`, { params });\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n"],"names":["params","useParams","paramsId","Number","moviesId","useState","movieCreditDetail","setMovieCreditDetail","error","setError","isLoading","setIsLoading","useEffect","getMovieCredits","getCreditsById","credits","message","alert","length","className","styles","map","id","name","profile_path","src","alt","axios","API_KEY","api_key","language","include_adult","trendingFilms","data","movies","results","original_title","searchingFilms","query","getFilmsById","poster_path","release_date","vote_average","overview","genres","Img","slice","toFixed","join","cast","getReviewsById","reviews","author","content"],"sourceRoot":""}