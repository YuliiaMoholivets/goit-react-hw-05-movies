{"version":3,"file":"static/js/660.70de42b9.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/page/MovieDetails/MovieDetails.module.css?40f4","components/DetailFilm/DetailsFilm.jsx","page/MovieDetails/MovieDetails.js","servises/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"MovieDetails_section__PqbxF\",\"image\":\"MovieDetails_image__iOHXz\",\"main_title\":\"MovieDetails_main_title__1G+ye\",\"title\":\"MovieDetails_title__h+zLE\",\"line\":\"MovieDetails_line__V885L\",\"link_list\":\"MovieDetails_link_list__txsLw\",\"item\":\"MovieDetails_item__5861v\"};","import styles from '../../page/MovieDetails/MovieDetails.module.css'\n\nexport const DetailsFilm = ({ movieDetail }) => {\n    const { poster_path,\n        original_title,\n        release_date,\n        vote_average,\n        overview,\n        genres, } = movieDetail;\n  return (\n    <div className={styles.section}>\n            <img\n              className={styles.image}\n              src={poster_path}\n              alt={original_title}\n            />\n          <div>\n            <p className={styles.main_title}>\n                  {original_title}\n                  <span>({release_date})</span>            \n            </p>\n            <p className={styles.main_title}>\n              User score: {vote_average}\n            </p>\n            <p className={styles.main_title}>\n              Overview: <br />\n              <span className={styles.line}>{overview}</span>\n            </p>\n            <p className={styles.main_title}>\n              Genres: <br />\n              {genres}\n            </p>\n          </div>\n        </div>\n  )\n}\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport styles from './MovieDetails.module.css';\nimport { DetailsFilm } from 'components/DetailFilm/DetailsFilm';\nimport { getFilmsById } from 'servises/API';\n\nconst MovieDetails = () => {\n  const params = useParams();\n  const paramsId = Number(params.moviesId);\n\n  const location = useLocation();\n  const [movieDetail, setMovieDetail] = useState();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  useEffect(() => {\n    if (!paramsId) return;\n    const getMovieDetail = async paramsId => {\n      try {\n        setIsLoading(true);\n        const movieDetail = await getFilmsById(paramsId);\n        setMovieDetail(movieDetail);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieDetail(paramsId);\n  }, [paramsId]);\n\n  useEffect(() => {\n    if (error) {\n      alert(error);\n    }\n  }, [error]);\n\n\n  return (\n    <section>\n      <Link className={styles.btn} to={location.state?.from}>\n        &#10229; Go back\n      </Link>\n      {movieDetail && !isLoading && <DetailsFilm movieDetail={ movieDetail} />      \n      }\n      <ul className={styles.link_list}>\n        <li className={styles.item}>\n          <Link to=\"cast\" state={{ from: location.state?.from }}>\n            Cast\n          </Link>\n        </li>\n        <li className={styles.item}>\n          <Link to=\"reviews\" state={{ from: location.state?.from }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Outlet />\n\n    </section>\n  );\n};\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  state: PropTypes.object,\n};\n","import axios from 'axios';\nimport Img from '../components/Image/img.png';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '817d33fa7e0ddfc368fbd7439a742f76';\n\nconst params = {\n  api_key: API_KEY,\n  language: 'en-US',\n  include_adult: false,\n};\n\nexport async function trendingFilms() {\n  const { data } = await axios.get('/trending/movie/day', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function searchingFilms(query) {\n  const params = {\n    query,\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function getFilmsById(id) {\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w500' + poster_path\n      : Img,\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(2),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n}\n\nexport async function getCreditsById(id) {\n  const { data } = await axios.get(`/movie/${id}/credits`, { params });\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: profile_path\n      ? 'https://image.tmdb.org/t/p/w500' + profile_path\n      : Img,\n  }));\n  return credits;\n}\n\nexport async function getReviewsById(id) {\n  const { data } = await axios.get(`/movie/${id}/reviews`, { params });\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n"],"names":["DetailsFilm","movieDetail","poster_path","original_title","release_date","vote_average","overview","genres","className","styles","src","alt","params","useParams","paramsId","Number","moviesId","location","useLocation","useState","setMovieDetail","error","setError","isLoading","setIsLoading","useEffect","getMovieDetail","getFilmsById","message","alert","to","state","from","axios","API_KEY","api_key","language","include_adult","trendingFilms","data","movies","results","map","id","searchingFilms","query","Img","slice","toFixed","name","join","getCreditsById","credits","cast","profile_path","getReviewsById","reviews","author","content"],"sourceRoot":""}